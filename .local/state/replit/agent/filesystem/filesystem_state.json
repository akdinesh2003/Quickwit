{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"server/gameLogic.ts":{"content":"export interface PuzzleGenerationConfig {\n  count: number;\n  difficulty: number;\n  types: ('pattern' | 'logic' | 'spatial')[];\n  playerCount: number;\n}\n\nexport interface ValidationResult {\n  isCorrect: boolean;\n  score: number;\n  feedback: string;\n}\n\nexport function generatePuzzleSet(config: PuzzleGenerationConfig) {\n  const puzzles = [];\n  \n  for (let i = 0; i < config.count; i++) {\n    const type = config.types[i % config.types.length];\n    const difficulty = Math.min(5, config.difficulty + Math.floor(i / 3));\n    \n    switch (type) {\n      case 'pattern':\n        puzzles.push(generatePatternPuzzle(difficulty, i));\n        break;\n      case 'logic':\n        puzzles.push(generateLogicPuzzle(difficulty, i));\n        break;\n      case 'spatial':\n        puzzles.push(generateSpatialPuzzle(difficulty, i));\n        break;\n    }\n  }\n  \n  return puzzles;\n}\n\nfunction generatePatternPuzzle(difficulty: number, id: number) {\n  const gridSize = 16;\n  const numHighlighted = Math.min(3 + difficulty, 8);\n  \n  const solution: number[] = [];\n  while (solution.length < numHighlighted) {\n    const cell = Math.floor(Math.random() * gridSize);\n    if (!solution.includes(cell)) {\n      solution.push(cell);\n    }\n  }\n\n  return {\n    id,\n    type: 'pattern',\n    difficulty,\n    solution,\n    timeLimit: Math.max(15, 30 - difficulty * 3),\n    gridSize,\n    description: `Memorize and recreate the pattern of ${numHighlighted} highlighted squares`\n  };\n}\n\nfunction generateLogicPuzzle(difficulty: number, id: number) {\n  const patterns = [\n    // Arithmetic progression\n    () => {\n      const start = Math.floor(Math.random() * 10) + 1;\n      const diff = Math.floor(Math.random() * 5) + 1;\n      const length = 3 + Math.floor(difficulty / 2);\n      const sequence = Array.from({ length }, (_, i) => start + i * diff);\n      return {\n        sequence: sequence.slice(0, -1),\n        solution: sequence[sequence.length - 1],\n        hint: `Add ${diff} to each number`,\n        pattern: 'arithmetic'\n      };\n    },\n    // Geometric progression\n    () => {\n      const start = Math.floor(Math.random() * 5) + 1;\n      const ratio = 2;\n      const length = 3 + Math.floor(difficulty / 3);\n      const sequence = Array.from({ length }, (_, i) => start * Math.pow(ratio, i));\n      return {\n        sequence: sequence.slice(0, -1),\n        solution: sequence[sequence.length - 1],\n        hint: `Multiply by ${ratio}`,\n        pattern: 'geometric'\n      };\n    },\n    // Square numbers\n    () => {\n      const start = Math.floor(Math.random() * 3) + 1;\n      const length = 3 + Math.floor(difficulty / 2);\n      const sequence = Array.from({ length }, (_, i) => Math.pow(start + i, 2));\n      return {\n        sequence: sequence.slice(0, -1),\n        solution: sequence[sequence.length - 1],\n        hint: \"Square numbers pattern\",\n        pattern: 'squares'\n      };\n    }\n  ];\n\n  const patternGenerator = patterns[Math.floor(Math.random() * patterns.length)];\n  const puzzle = patternGenerator();\n\n  return {\n    id,\n    type: 'logic',\n    difficulty,\n    timeLimit: Math.max(20, 45 - difficulty * 5),\n    ...puzzle,\n    description: `Find the next number in the sequence`\n  };\n}\n\nfunction generateSpatialPuzzle(difficulty: number, id: number) {\n  const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#a8e6cf'];\n  const numBlocks = 6 + difficulty * 2;\n  \n  const blocks = Array.from({ length: numBlocks }, (_, i) => ({\n    id: i,\n    x: (Math.random() - 0.5) * 8,\n    y: Math.random() * 4,\n    z: (Math.random() - 0.5) * 8,\n    color: colors[Math.floor(Math.random() * colors.length)],\n    isTarget: false,\n    size: 1\n  }));\n\n  // Create a pattern for targets\n  const numTargets = Math.min(2 + Math.floor(difficulty / 2), 6);\n  const solution: number[] = [];\n  \n  // Select blocks based on a pattern (e.g., specific color, position)\n  const targetColor = colors[Math.floor(Math.random() * colors.length)];\n  const colorTargets = blocks\n    .filter(block => block.color === targetColor)\n    .slice(0, numTargets);\n  \n  colorTargets.forEach(block => {\n    solution.push(block.id);\n    block.isTarget = true;\n  });\n\n  // If not enough color matches, add random targets\n  while (solution.length < numTargets) {\n    const randomIndex = Math.floor(Math.random() * blocks.length);\n    if (!solution.includes(randomIndex)) {\n      solution.push(randomIndex);\n      blocks[randomIndex].isTarget = true;\n    }\n  }\n\n  return {\n    id,\n    type: 'spatial',\n    difficulty,\n    timeLimit: Math.max(30, 60 - difficulty * 5),\n    blocks,\n    solution,\n    targetColor,\n    instruction: `Select all blocks with color ${targetColor}`,\n    description: `Find and select the ${numTargets} blocks that match the pattern`\n  };\n}\n\nexport function validateAnswer(puzzleType: string, answer: any, solution: any): ValidationResult {\n  let isCorrect = false;\n  let score = 0;\n  let feedback = \"\";\n\n  switch (puzzleType) {\n    case 'pattern':\n      isCorrect = Array.isArray(answer) && Array.isArray(solution) &&\n        answer.length === solution.length &&\n        answer.every((item: any) => solution.includes(item));\n      score = isCorrect ? 100 : Math.max(0, 100 - Math.abs(answer.length - solution.length) * 20);\n      feedback = isCorrect ? \"Perfect pattern match!\" : \"Pattern doesn't match exactly\";\n      break;\n\n    case 'logic':\n      isCorrect = answer.toString() === solution.toString();\n      score = isCorrect ? 100 : 0;\n      feedback = isCorrect ? \"Correct sequence completion!\" : \"Wrong number in sequence\";\n      break;\n\n    case 'spatial':\n      if (Array.isArray(answer) && Array.isArray(solution)) {\n        const correctSelections = answer.filter((item: any) => solution.includes(item)).length;\n        const incorrectSelections = answer.length - correctSelections;\n        const missedSelections = solution.length - correctSelections;\n        \n        isCorrect = correctSelections === solution.length && incorrectSelections === 0;\n        score = Math.max(0, (correctSelections * 100 / solution.length) - (incorrectSelections * 20) - (missedSelections * 20));\n        \n        if (isCorrect) {\n          feedback = \"Perfect spatial recognition!\";\n        } else {\n          feedback = `${correctSelections}/${solution.length} correct selections`;\n        }\n      }\n      break;\n\n    default:\n      feedback = \"Unknown puzzle type\";\n  }\n\n  return { isCorrect, score: Math.round(score), feedback };\n}\n","size_bytes":6411},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Add Socket.IO for real-time multiplayer quiz\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: \"*\",\n      methods: [\"GET\", \"POST\"]\n    }\n  });\n\n  // Quiz room management\n  const quizRooms = new Map();\n  const playerConnections = new Map();\n\n  io.on('connection', (socket) => {\n    console.log(`Player connected: ${socket.id}`);\n\n    // Host creates a new quiz room\n    socket.on('create-room', (hostData) => {\n      let roomCode;\n      \n      // Use custom room code if provided, otherwise generate one\n      if (hostData.customRoomCode) {\n        const customCode = hostData.customRoomCode.toUpperCase();\n        \n        // Validate custom code format (4-6 alphanumeric characters)\n        if (!/^[A-Z0-9]{4,6}$/.test(customCode)) {\n          socket.emit('join-error', { \n            message: 'Room code must be 4-6 characters (letters and numbers only)' \n          });\n          return;\n        }\n        \n        // Check if custom code already exists\n        if (quizRooms.has(customCode)) {\n          socket.emit('join-error', { \n            message: 'This room code is already taken. Please choose a different one.' \n          });\n          return;\n        }\n        \n        roomCode = customCode;\n      } else {\n        // Generate auto room code and ensure it's unique\n        do {\n          roomCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n        } while (quizRooms.has(roomCode));\n      }\n      \n      const room = {\n        id: roomCode,\n        host: socket.id,\n        hostName: hostData.hostName || 'Host',\n        players: [],\n        currentQuestion: 0,\n        gameState: 'waiting', // waiting, active, finished\n        questions: hostData.questions || [],\n        scores: new Map(),\n        createdAt: Date.now()\n      };\n      \n      quizRooms.set(roomCode, room);\n      socket.join(roomCode);\n      \n      socket.emit('room-created', { \n        roomCode, \n        questions: room.questions.length,\n        isHost: true \n      });\n      \n      console.log(`Quiz room ${roomCode} created by ${hostData.hostName} ${hostData.customRoomCode ? '(custom code)' : '(auto-generated)'}`);\n    });\n\n    // Player joins a quiz room\n    socket.on('join-room', (joinData) => {\n      const { roomCode, playerName } = joinData;\n      const room = quizRooms.get(roomCode);\n      \n      if (!room) {\n        socket.emit('join-error', { message: 'Room not found' });\n        return;\n      }\n      \n      if (room.gameState !== 'waiting') {\n        socket.emit('join-error', { message: 'Game already in progress' });\n        return;\n      }\n      \n      const player = {\n        id: socket.id,\n        name: playerName || `Player ${room.players.length + 1}`,\n        score: 0,\n        connected: true,\n        joinedAt: Date.now()\n      };\n      \n      room.players.push(player);\n      room.scores.set(socket.id, 0);\n      socket.join(roomCode);\n      playerConnections.set(socket.id, roomCode);\n      \n      // Notify all players in room\n      io.to(roomCode).emit('player-joined', {\n        player,\n        playerCount: room.players.length,\n        players: room.players\n      });\n      \n      socket.emit('room-joined', {\n        roomCode,\n        isHost: false,\n        players: room.players,\n        hostName: room.hostName\n      });\n      \n      console.log(`${playerName} joined room ${roomCode}`);\n    });\n\n    // Host starts the quiz\n    socket.on('start-quiz', (data) => {\n      const { roomCode } = data;\n      const room = quizRooms.get(roomCode);\n      \n      if (!room || room.host !== socket.id) {\n        return;\n      }\n      \n      room.gameState = 'active';\n      room.currentQuestion = 0;\n      \n      // Send first question to all players\n      const currentQ = room.questions[0];\n      io.to(roomCode).emit('quiz-started', {\n        question: currentQ.question,\n        options: currentQ.options,\n        questionNumber: 1,\n        totalQuestions: room.questions.length,\n        timeLimit: 30\n      });\n      \n      console.log(`Quiz started in room ${roomCode}`);\n    });\n\n    // Player submits answer\n    socket.on('submit-answer', (data) => {\n      const { roomCode, answer, timeSpent } = data;\n      const room = quizRooms.get(roomCode);\n      \n      if (!room || room.gameState !== 'active') {\n        return;\n      }\n      \n      const currentQ = room.questions[room.currentQuestion];\n      const isCorrect = answer === currentQ.correctAnswer;\n      \n      // Update player score\n      let scoreGained = 0;\n      if (isCorrect) {\n        const baseScore = 100;\n        const timeBonus = Math.max(0, (30 - timeSpent) * 2);\n        scoreGained = baseScore + timeBonus;\n        room.scores.set(socket.id, (room.scores.get(socket.id) || 0) + scoreGained);\n      }\n      \n      // Send result to player\n      socket.emit('answer-result', {\n        isCorrect,\n        score: scoreGained,\n        correctAnswer: currentQ.correctAnswer,\n        currentScore: room.scores.get(socket.id)\n      });\n      \n      // Send leaderboard to all players\n      const leaderboard = Array.from(room.scores.entries())\n        .map(([playerId, score]) => {\n          const player = room.players.find(p => p.id === playerId);\n          return { name: player?.name || 'Unknown', score };\n        })\n        .sort((a, b) => b.score - a.score);\n      \n      io.to(roomCode).emit('leaderboard-update', { leaderboard });\n    });\n\n    // Host moves to next question\n    socket.on('next-question', (data) => {\n      const { roomCode } = data;\n      const room = quizRooms.get(roomCode);\n      \n      if (!room || room.host !== socket.id) {\n        return;\n      }\n      \n      room.currentQuestion++;\n      \n      if (room.currentQuestion >= room.questions.length) {\n        // Quiz finished\n        room.gameState = 'finished';\n        const finalLeaderboard = Array.from(room.scores.entries())\n          .map(([playerId, score]) => {\n            const player = room.players.find(p => p.id === playerId);\n            return { name: player?.name || 'Unknown', score };\n          })\n          .sort((a, b) => b.score - a.score);\n        \n        io.to(roomCode).emit('quiz-finished', {\n          finalLeaderboard,\n          winner: finalLeaderboard[0]\n        });\n      } else {\n        // Send next question\n        const currentQ = room.questions[room.currentQuestion];\n        io.to(roomCode).emit('next-question', {\n          question: currentQ.question,\n          options: currentQ.options,\n          questionNumber: room.currentQuestion + 1,\n          totalQuestions: room.questions.length,\n          timeLimit: 30\n        });\n      }\n    });\n\n    // Handle disconnection\n    socket.on('disconnect', () => {\n      const roomCode = playerConnections.get(socket.id);\n      if (roomCode) {\n        const room = quizRooms.get(roomCode);\n        if (room) {\n          // Remove player from room\n          room.players = room.players.filter(p => p.id !== socket.id);\n          room.scores.delete(socket.id);\n          \n          // Notify remaining players\n          io.to(roomCode).emit('player-left', {\n            playerId: socket.id,\n            playerCount: room.players.length,\n            players: room.players\n          });\n          \n          // Clean up empty rooms\n          if (room.players.length === 0 || room.host === socket.id) {\n            quizRooms.delete(roomCode);\n            console.log(`Room ${roomCode} cleaned up`);\n          }\n        }\n        playerConnections.delete(socket.id);\n      }\n      console.log(`Player disconnected: ${socket.id}`);\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":7816},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import { Suspense } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport \"@fontsource/inter\";\nimport QuizApp from \"@/components/quiz/QuizApp\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"w-full h-screen overflow-hidden\">\n        <Suspense fallback={\n          <div className=\"flex items-center justify-center h-full bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900\">\n            <div className=\"text-2xl text-white font-light\">Loading QuizMaster Live...</div>\n          </div>\n        }>\n          <QuizApp />\n        </Suspense>\n      </div>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":746},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}\n\n/* Custom animations for puzzle elements */\n@keyframes pulse-success {\n  0%, 100% { transform: scale(1); background-color: rgb(34 197 94); }\n  50% { transform: scale(1.05); background-color: rgb(22 163 74); }\n}\n\n@keyframes shake-error {\n  0%, 100% { transform: translateX(0); }\n  25% { transform: translateX(-5px); }\n  75% { transform: translateX(5px); }\n}\n\n.puzzle-success {\n  animation: pulse-success 0.6s ease-in-out;\n}\n\n.puzzle-error {\n  animation: shake-error 0.4s ease-in-out;\n}\n\n/* Smooth transitions for UI elements */\n.game-transition {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Custom scrollbar for better UX */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: rgb(243 244 246);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: rgb(156 163 175);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: rgb(107 114 128);\n}\n\n/* Focus styles for accessibility */\n.focus-visible:focus-visible {\n  outline: 2px solid rgb(59 130 246);\n  outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 0%;\n    --border: 0 0% 50%;\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  *, *::before, *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n","size_bytes":2770},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/puzzleGenerator.ts":{"content":"export interface PuzzleConfig {\n  type: 'pattern' | 'logic' | 'spatial';\n  difficulty: number;\n}\n\nexport function generatePuzzle(type: 'pattern' | 'logic' | 'spatial', difficulty: number) {\n  switch (type) {\n    case 'pattern':\n      return generatePatternPuzzle(difficulty);\n    case 'logic':\n      return generateLogicPuzzle(difficulty);\n    case 'spatial':\n      return generateSpatialPuzzle(difficulty);\n    default:\n      return generatePatternPuzzle(difficulty);\n  }\n}\n\nfunction generatePatternPuzzle(difficulty: number) {\n  const gridSize = 16; // 4x4 grid\n  const numHighlighted = Math.min(3 + difficulty, 8);\n  \n  const solution: number[] = [];\n  while (solution.length < numHighlighted) {\n    const cell = Math.floor(Math.random() * gridSize);\n    if (!solution.includes(cell)) {\n      solution.push(cell);\n    }\n  }\n\n  return {\n    type: 'pattern' as const,\n    difficulty,\n    solution,\n    timeLimit: 30,\n    gridSize\n  };\n}\n\nfunction generateLogicPuzzle(difficulty: number) {\n  const patterns = [\n    // Arithmetic sequences\n    {\n      generate: () => {\n        const start = Math.floor(Math.random() * 10) + 1;\n        const diff = Math.floor(Math.random() * 5) + 1;\n        const length = 3 + difficulty;\n        const sequence = Array.from({ length }, (_, i) => start + i * diff);\n        return {\n          sequence: sequence.slice(0, -1),\n          solution: sequence[sequence.length - 1],\n          hint: `Add ${diff} each time`\n        };\n      }\n    },\n    // Geometric sequences\n    {\n      generate: () => {\n        const start = Math.floor(Math.random() * 5) + 1;\n        const ratio = 2;\n        const length = 3 + Math.floor(difficulty / 2);\n        const sequence = Array.from({ length }, (_, i) => start * Math.pow(ratio, i));\n        return {\n          sequence: sequence.slice(0, -1),\n          solution: sequence[sequence.length - 1],\n          hint: `Multiply by ${ratio} each time`\n        };\n      }\n    },\n    // Fibonacci-like\n    {\n      generate: () => {\n        const a = Math.floor(Math.random() * 3) + 1;\n        const b = Math.floor(Math.random() * 3) + 1;\n        const sequence = [a, b];\n        for (let i = 2; i < 4 + difficulty; i++) {\n          sequence.push(sequence[i-1] + sequence[i-2]);\n        }\n        return {\n          sequence: sequence.slice(0, -1),\n          solution: sequence[sequence.length - 1],\n          hint: \"Each number is the sum of the previous two\"\n        };\n      }\n    }\n  ];\n\n  const pattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const puzzle = pattern.generate();\n\n  return {\n    type: 'logic' as const,\n    difficulty,\n    timeLimit: 45,\n    ...puzzle\n  };\n}\n\nfunction generateSpatialPuzzle(difficulty: number) {\n  const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57'];\n  const numBlocks = 8 + difficulty * 2;\n  \n  const blocks = Array.from({ length: numBlocks }, (_, i) => ({\n    x: (Math.random() - 0.5) * 6,\n    y: Math.random() * 3,\n    z: (Math.random() - 0.5) * 6,\n    color: colors[Math.floor(Math.random() * colors.length)],\n    isTarget: false\n  }));\n\n  // Mark some blocks as targets (solution)\n  const numTargets = Math.min(2 + difficulty, 6);\n  const solution: number[] = [];\n  \n  while (solution.length < numTargets) {\n    const index = Math.floor(Math.random() * blocks.length);\n    if (!solution.includes(index)) {\n      solution.push(index);\n      blocks[index].isTarget = true;\n    }\n  }\n\n  return {\n    type: 'spatial' as const,\n    difficulty,\n    timeLimit: 60,\n    blocks,\n    solution,\n    instruction: `Find and select the ${numTargets} highlighted blocks`\n  };\n}\n","size_bytes":3605},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/skillTracker.ts":{"content":"import { getLocalStorage, setLocalStorage } from './utils';\n\nexport interface AttemptRecord {\n  puzzleType: 'pattern' | 'logic' | 'spatial';\n  difficulty: number;\n  isCorrect: boolean;\n  timeSpent: number;\n  answer: any;\n  timestamp: number;\n}\n\nexport interface PlayerStats {\n  totalAttempts: number;\n  correctAttempts: number;\n  averageTime: number;\n  difficultyProgression: number[];\n  recentPerformance: boolean[];\n}\n\nexport class SkillTracker {\n  private readonly storageKey = 'puzzleGameSkills';\n  private playerStats: Map<string, PlayerStats> = new Map();\n\n  constructor() {\n    this.loadFromStorage();\n  }\n\n  recordAttempt(playerName: string, attempt: AttemptRecord) {\n    if (!this.playerStats.has(playerName)) {\n      this.playerStats.set(playerName, {\n        totalAttempts: 0,\n        correctAttempts: 0,\n        averageTime: 0,\n        difficultyProgression: [],\n        recentPerformance: []\n      });\n    }\n\n    const stats = this.playerStats.get(playerName)!;\n    \n    // Update stats\n    stats.totalAttempts++;\n    if (attempt.isCorrect) {\n      stats.correctAttempts++;\n    }\n    \n    // Update average time (weighted average)\n    const totalTime = stats.averageTime * (stats.totalAttempts - 1) + attempt.timeSpent;\n    stats.averageTime = totalTime / stats.totalAttempts;\n    \n    // Track difficulty progression\n    stats.difficultyProgression.push(attempt.difficulty);\n    if (stats.difficultyProgression.length > 10) {\n      stats.difficultyProgression.shift();\n    }\n    \n    // Track recent performance (last 5 attempts)\n    stats.recentPerformance.push(attempt.isCorrect);\n    if (stats.recentPerformance.length > 5) {\n      stats.recentPerformance.shift();\n    }\n\n    this.saveToStorage();\n  }\n\n  getPlayerDifficulty(playerName: string): number {\n    const stats = this.playerStats.get(playerName);\n    \n    if (!stats || stats.totalAttempts < 3) {\n      return 1; // Start with easy difficulty\n    }\n\n    const successRate = stats.correctAttempts / stats.totalAttempts;\n    const recentSuccessRate = stats.recentPerformance.filter(Boolean).length / stats.recentPerformance.length;\n    \n    // Calculate difficulty based on success rate and recent performance\n    let difficulty = 1;\n    \n    if (recentSuccessRate > 0.8) {\n      difficulty = Math.min(stats.difficultyProgression[stats.difficultyProgression.length - 1] + 1, 5);\n    } else if (recentSuccessRate < 0.4) {\n      difficulty = Math.max(stats.difficultyProgression[stats.difficultyProgression.length - 1] - 1, 1);\n    } else {\n      difficulty = stats.difficultyProgression[stats.difficultyProgression.length - 1] || 1;\n    }\n\n    // Factor in overall success rate\n    if (successRate > 0.7) {\n      difficulty = Math.min(difficulty + 1, 5);\n    } else if (successRate < 0.3) {\n      difficulty = Math.max(difficulty - 1, 1);\n    }\n\n    return Math.max(1, Math.min(5, Math.round(difficulty)));\n  }\n\n  getPlayerStats(playerName: string): PlayerStats | null {\n    return this.playerStats.get(playerName) || null;\n  }\n\n  private loadFromStorage() {\n    try {\n      const data = getLocalStorage(this.storageKey);\n      if (data) {\n        this.playerStats = new Map(Object.entries(data));\n      }\n    } catch (error) {\n      console.warn('Failed to load skill tracking data:', error);\n    }\n  }\n\n  private saveToStorage() {\n    try {\n      const data = Object.fromEntries(this.playerStats);\n      setLocalStorage(this.storageKey, data);\n    } catch (error) {\n      console.warn('Failed to save skill tracking data:', error);\n    }\n  }\n\n  // Get difficulty recommendation for a specific puzzle type\n  getPuzzleTypeDifficulty(playerName: string, puzzleType: 'pattern' | 'logic' | 'spatial'): number {\n    const stats = this.playerStats.get(playerName);\n    if (!stats) return 1;\n\n    // This could be extended to track performance per puzzle type\n    // For now, use general difficulty\n    return this.getPlayerDifficulty(playerName);\n  }\n}\n","size_bytes":3922},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/game/GameBoard.tsx":{"content":"import { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { usePuzzleGame } from \"@/lib/stores/usePuzzleGame\";\nimport PatternPuzzle from \"@/components/game/PatternPuzzle\";\nimport LogicPuzzle from \"@/components/game/LogicPuzzle\";\nimport SpatialPuzzle from \"@/components/game/SpatialPuzzle\";\nimport GameUI from \"@/components/game/GameUI\";\nimport ScoreBoard from \"@/components/game/ScoreBoard\";\n\nexport default function GameBoard() {\n  const { currentPuzzle, gamePhase } = usePuzzleGame();\n\n  const renderPuzzle = () => {\n    if (!currentPuzzle) return null;\n\n    switch (currentPuzzle.type) {\n      case 'pattern':\n        return <PatternPuzzle puzzle={currentPuzzle} />;\n      case 'logic':\n        return <LogicPuzzle puzzle={currentPuzzle} />;\n      case 'spatial':\n        return (\n          <Canvas camera={{ position: [0, 5, 8], fov: 60 }}>\n            <ambientLight intensity={0.6} />\n            <directionalLight position={[10, 10, 5]} intensity={1} />\n            <SpatialPuzzle puzzle={currentPuzzle} />\n            <OrbitControls enablePan={false} maxDistance={15} minDistance={5} />\n          </Canvas>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"relative w-full h-full\">\n      <div className=\"absolute top-0 left-0 right-0 z-10\">\n        <GameUI />\n      </div>\n      \n      <div className=\"w-full h-full\">\n        {renderPuzzle()}\n      </div>\n\n      {gamePhase === 'gameOver' && (\n        <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-20\">\n          <ScoreBoard />\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1657},"client/src/components/game/GameUI.tsx":{"content":"import { usePuzzleGame } from '@/lib/stores/usePuzzleGame';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Clock, Users, Trophy, RotateCcw } from 'lucide-react';\nimport { useEffect, useState } from 'react';\n\nexport default function GameUI() {\n  const { \n    currentPlayer, \n    players, \n    timeLeft, \n    puzzlesCompleted, \n    totalPuzzles,\n    gamePhase,\n    nextTurn,\n    restartGame\n  } = usePuzzleGame();\n  \n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    setProgress((puzzlesCompleted / totalPuzzles) * 100);\n  }, [puzzlesCompleted, totalPuzzles]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"bg-white/90 backdrop-blur-sm border-b border-gray-200 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5 text-blue-600\" />\n              <span className=\"font-mono font-semibold text-lg\">\n                {formatTime(timeLeft)}\n              </span>\n            </div>\n            \n            {players.length > 1 && (\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5 text-green-600\" />\n                <span className=\"font-medium\">\n                  {players[currentPlayer]?.name}'s turn\n                </span>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              onClick={restartGame}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex items-center space-x-1\"\n            >\n              <RotateCcw className=\"h-4 w-4\" />\n              <span>Restart</span>\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm text-gray-600\">\n            <span>Progress</span>\n            <span>{puzzlesCompleted} / {totalPuzzles} puzzles</span>\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n\n        {players.length > 1 && (\n          <div className=\"mt-3 flex items-center space-x-4\">\n            {players.map((player: any, index: number) => (\n              <div \n                key={index}\n                className={`flex items-center space-x-2 px-3 py-1 rounded-lg ${\n                  index === currentPlayer \n                    ? 'bg-blue-100 border border-blue-300' \n                    : 'bg-gray-100'\n                }`}\n              >\n                <Trophy className=\"h-4 w-4 text-yellow-600\" />\n                <span className=\"font-medium text-sm\">{player.name}</span>\n                <span className=\"text-xs bg-white px-2 py-1 rounded\">\n                  {player.score}\n                </span>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3198},"client/src/components/game/LogicPuzzle.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { usePuzzleGame } from '@/lib/stores/usePuzzleGame';\nimport { useAudio } from '@/lib/stores/useAudio';\n\ninterface LogicPuzzleProps {\n  puzzle: any;\n}\n\nexport default function LogicPuzzle({ puzzle }: LogicPuzzleProps) {\n  const { submitAnswer } = usePuzzleGame();\n  const { playHit, playSuccess } = useAudio();\n  const [userAnswer, setUserAnswer] = useState('');\n\n  const handleSubmit = () => {\n    const isCorrect = userAnswer.trim() === puzzle.solution.toString();\n    \n    if (isCorrect) {\n      playSuccess();\n    } else {\n      playHit();\n    }\n    \n    submitAnswer(userAnswer, isCorrect);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSubmit();\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center h-full p-4\">\n      <Card className=\"max-w-lg\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n              Logic Sequence\n            </h3>\n            <p className=\"text-sm text-gray-600\">\n              Find the pattern and complete the sequence\n            </p>\n          </div>\n          \n          <div className=\"text-center mb-6\">\n            <div className=\"text-2xl font-mono font-bold text-gray-700 mb-4\">\n              {puzzle.sequence.join(' → ')} → ?\n            </div>\n            \n            <div className=\"text-sm text-gray-500 mb-2\">\n              Hint: {puzzle.hint}\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <Input\n              type=\"text\"\n              placeholder=\"Enter your answer\"\n              value={userAnswer}\n              onChange={(e) => setUserAnswer(e.target.value)}\n              onKeyPress={handleKeyPress}\n              className=\"text-center text-lg\"\n              autoFocus\n            />\n            \n            <div className=\"flex gap-2\">\n              <Button \n                onClick={() => setUserAnswer('')}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Clear\n              </Button>\n              <Button \n                onClick={handleSubmit}\n                disabled={userAnswer.trim() === ''}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n              >\n                Submit\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2654},"client/src/components/game/PatternPuzzle.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { usePuzzleGame } from '@/lib/stores/usePuzzleGame';\nimport { useAudio } from '@/lib/stores/useAudio';\n\ninterface PatternPuzzleProps {\n  puzzle: any;\n}\n\nexport default function PatternPuzzle({ puzzle }: PatternPuzzleProps) {\n  const { submitAnswer } = usePuzzleGame();\n  const { playHit, playSuccess } = useAudio();\n  const [userPattern, setUserPattern] = useState<number[]>([]);\n  const [showPattern, setShowPattern] = useState(true);\n\n  useEffect(() => {\n    // Show pattern for a few seconds then hide it\n    const timer = setTimeout(() => {\n      setShowPattern(false);\n    }, puzzle.difficulty * 1000 + 2000); // More time for harder puzzles\n\n    return () => clearTimeout(timer);\n  }, [puzzle.difficulty]);\n\n  const handleCellClick = (index: number) => {\n    if (showPattern) return;\n    \n    playHit();\n    const newPattern = [...userPattern];\n    const cellIndex = newPattern.indexOf(index);\n    \n    if (cellIndex === -1) {\n      newPattern.push(index);\n    } else {\n      newPattern.splice(cellIndex, 1);\n    }\n    \n    setUserPattern(newPattern);\n  };\n\n  const handleSubmit = () => {\n    const isCorrect = userPattern.length === puzzle.solution.length &&\n      userPattern.every(cell => puzzle.solution.includes(cell));\n    \n    if (isCorrect) {\n      playSuccess();\n    } else {\n      playHit();\n    }\n    \n    submitAnswer(userPattern, isCorrect);\n  };\n\n  const isSelected = (index: number) => userPattern.includes(index);\n  const isTarget = (index: number) => showPattern && puzzle.solution.includes(index);\n\n  return (\n    <div className=\"flex items-center justify-center h-full p-4\">\n      <Card className=\"max-w-lg\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">\n              {showPattern ? 'Memorize this pattern!' : 'Recreate the pattern'}\n            </h3>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              {showPattern ? 'Pattern will disappear soon...' : 'Click the cells that were highlighted'}\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-4 gap-2 mb-4\">\n            {Array.from({ length: 16 }, (_, i) => (\n              <button\n                key={i}\n                onClick={() => handleCellClick(i)}\n                disabled={showPattern}\n                className={`\n                  w-12 h-12 rounded border-2 transition-all duration-200\n                  ${isTarget(i) \n                    ? 'bg-blue-500 border-blue-600' \n                    : isSelected(i)\n                    ? 'bg-green-500 border-green-600'\n                    : 'bg-gray-100 border-gray-300 hover:bg-gray-200'\n                  }\n                  ${showPattern ? 'cursor-not-allowed' : 'cursor-pointer'}\n                `}\n              />\n            ))}\n          </div>\n\n          {!showPattern && (\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={() => setUserPattern([])}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Clear\n              </Button>\n              <Button \n                onClick={handleSubmit}\n                disabled={userPattern.length === 0}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n              >\n                Submit\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3605},"client/src/components/game/PlayerSetup.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Users, User, Play } from 'lucide-react';\nimport { usePuzzleGame } from '@/lib/stores/usePuzzleGame';\n\nexport default function PlayerSetup() {\n  const { startGame } = usePuzzleGame();\n  const [playerCount, setPlayerCount] = useState<number>(1);\n  const [playerNames, setPlayerNames] = useState<string[]>(['Player 1']);\n\n  const handlePlayerCountChange = (count: number) => {\n    setPlayerCount(count);\n    const newNames = Array.from({ length: count }, (_, i) => \n      playerNames[i] || `Player ${i + 1}`\n    );\n    setPlayerNames(newNames);\n  };\n\n  const handleNameChange = (index: number, name: string) => {\n    const newNames = [...playerNames];\n    newNames[index] = name || `Player ${index + 1}`;\n    setPlayerNames(newNames);\n  };\n\n  const handleStartGame = () => {\n    startGame(playerNames.slice(0, playerCount));\n  };\n\n  return (\n    <div className=\"flex items-center justify-center h-full p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-gray-800\">\n            Adaptive Puzzle Game\n          </CardTitle>\n          <p className=\"text-gray-600\">Quick puzzles that adapt to your skill</p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700\">Number of Players</Label>\n            <div className=\"grid grid-cols-4 gap-2 mt-2\">\n              {[1, 2, 3, 4].map((count) => (\n                <Button\n                  key={count}\n                  variant={playerCount === count ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handlePlayerCountChange(count)}\n                  className=\"flex items-center gap-1\"\n                >\n                  {count === 1 ? <User className=\"h-3 w-3\" /> : <Users className=\"h-3 w-3\" />}\n                  {count}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {playerCount > 1 && (\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-medium text-gray-700\">Player Names</Label>\n              {Array.from({ length: playerCount }, (_, i) => (\n                <Input\n                  key={i}\n                  placeholder={`Player ${i + 1}`}\n                  value={playerNames[i] || ''}\n                  onChange={(e) => handleNameChange(i, e.target.value)}\n                  className=\"text-sm\"\n                />\n              ))}\n            </div>\n          )}\n\n          <Button \n            onClick={handleStartGame}\n            className=\"w-full bg-blue-600 hover:bg-blue-700\"\n            size=\"lg\"\n          >\n            <Play className=\"h-4 w-4 mr-2\" />\n            Start Game\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3079},"client/src/components/game/ScoreBoard.tsx":{"content":"import { usePuzzleGame } from '@/lib/stores/usePuzzleGame';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Trophy, Medal, Award, RotateCcw, Home } from 'lucide-react';\n\nexport default function ScoreBoard() {\n  const { players, restartGame, goToSetup } = usePuzzleGame();\n\n  const sortedPlayers = [...players].sort((a, b) => b.score - a.score);\n  const winner = sortedPlayers[0];\n\n  const getIcon = (rank: number) => {\n    switch (rank) {\n      case 0: return <Trophy className=\"h-6 w-6 text-yellow-500\" />;\n      case 1: return <Medal className=\"h-6 w-6 text-gray-400\" />;\n      case 2: return <Award className=\"h-6 w-6 text-amber-600\" />;\n      default: return <div className=\"h-6 w-6\" />;\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-4\">\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"text-2xl font-bold text-gray-800\">\n          Game Over!\n        </CardTitle>\n        {players.length > 1 && (\n          <p className=\"text-lg text-blue-600 font-semibold\">\n            🎉 {winner.name} wins!\n          </p>\n        )}\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          {sortedPlayers.map((player, index) => (\n            <div \n              key={index}\n              className={`flex items-center justify-between p-3 rounded-lg ${\n                index === 0 ? 'bg-yellow-50 border border-yellow-200' : 'bg-gray-50'\n              }`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                {getIcon(index)}\n                <div>\n                  <div className=\"font-medium text-gray-800\">{player.name}</div>\n                  <div className=\"text-sm text-gray-600\">\n                    {player.puzzlesSolved} puzzles solved\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-xl font-bold text-gray-800\">\n                  {player.score}\n                </div>\n                <div className=\"text-xs text-gray-500\">points</div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex space-x-2 pt-4\">\n          <Button\n            onClick={restartGame}\n            variant=\"outline\"\n            className=\"flex-1 flex items-center space-x-2\"\n          >\n            <RotateCcw className=\"h-4 w-4\" />\n            <span>Play Again</span>\n          </Button>\n          <Button\n            onClick={goToSetup}\n            className=\"flex-1 flex items-center space-x-2 bg-blue-600 hover:bg-blue-700\"\n          >\n            <Home className=\"h-4 w-4\" />\n            <span>New Game</span>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2831},"client/src/components/game/SpatialPuzzle.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Box, Text } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { usePuzzleGame } from '@/lib/stores/usePuzzleGame';\nimport { useAudio } from '@/lib/stores/useAudio';\n\ninterface SpatialPuzzleProps {\n  puzzle: any;\n}\n\nexport default function SpatialPuzzle({ puzzle }: SpatialPuzzleProps) {\n  const { submitAnswer } = usePuzzleGame();\n  const { playHit, playSuccess } = useAudio();\n  const [selectedBlocks, setSelectedBlocks] = useState<number[]>([]);\n  const groupRef = useRef<THREE.Group>(null);\n\n  useFrame(() => {\n    if (groupRef.current) {\n      groupRef.current.rotation.y += 0.005;\n    }\n  });\n\n  const handleBlockClick = (index: number) => {\n    playHit();\n    setSelectedBlocks(prev => \n      prev.includes(index) \n        ? prev.filter(i => i !== index)\n        : [...prev, index]\n    );\n  };\n\n  const handleSubmit = () => {\n    const isCorrect = selectedBlocks.length === puzzle.solution.length &&\n      selectedBlocks.every(block => puzzle.solution.includes(block));\n    \n    if (isCorrect) {\n      playSuccess();\n    } else {\n      playHit();\n    }\n    \n    submitAnswer(selectedBlocks, isCorrect);\n  };\n\n  return (\n    <group ref={groupRef}>\n      <Text\n        position={[0, 4, 0]}\n        fontSize={0.5}\n        color=\"black\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        {puzzle.instruction || \"Select the blocks that complete the pattern\"}\n      </Text>\n      \n      {puzzle.blocks.map((block: any, index: number) => (\n        <Box\n          key={index}\n          position={[block.x, block.y, block.z]}\n          args={[1, 1, 1]}\n          onClick={() => handleBlockClick(index)}\n        >\n          <meshStandardMaterial \n            color={selectedBlocks.includes(index) ? '#22c55e' : block.color}\n            transparent\n            opacity={block.isTarget ? 0.5 : 1}\n          />\n        </Box>\n      ))}\n      \n      <Text\n        position={[0, -3, 0]}\n        fontSize={0.3}\n        color=\"gray\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        onClick={handleSubmit}\n        onPointerOver={(e) => { e.stopPropagation(); }}\n      >\n        Click here to submit\n      </Text>\n    </group>\n  );\n}\n","size_bytes":2258},"client/src/components/quiz/QuizApp.tsx":{"content":"import { useState, useEffect } from 'react';\nimport QuizLanding from './QuizLanding';\nimport QuizHost from './QuizHost';\nimport QuizPlayer from './QuizPlayer';\nimport { useSocket } from '@/lib/stores/useSocket';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { AlertCircle } from 'lucide-react';\n\ntype GameMode = 'landing' | 'host' | 'player';\n\nexport default function QuizApp() {\n  const { socket, currentRoom, isHost, error, clearError } = useSocket();\n  const [mode, setMode] = useState<GameMode>('landing');\n  const [playerName, setPlayerName] = useState('');\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // Listen for successful room creation (host)\n    socket.on('room-created', (data) => {\n      setMode('host');\n    });\n\n    // Listen for successful room join (player)  \n    socket.on('room-joined', (data) => {\n      setMode('player');\n    });\n\n    // Listen for join errors\n    socket.on('join-error', (data) => {\n      // Stay in landing mode so user can try again\n      setMode('landing');\n    });\n\n    // Listen for disconnect - return to landing\n    socket.on('disconnect', () => {\n      setMode('landing');\n      setPlayerName('');\n    });\n\n    return () => {\n      socket.off('room-created');\n      socket.off('room-joined');\n      socket.off('join-error');\n      socket.off('disconnect');\n    };\n  }, [socket]);\n\n  // Store player name from join attempt\n  useEffect(() => {\n    if (!socket) return;\n\n    const originalEmit = socket.emit;\n    socket.emit = function(event, ...args) {\n      if (event === 'join-room' && args[0]?.playerName) {\n        setPlayerName(args[0].playerName);\n      }\n      return originalEmit.apply(this, [event, ...args]);\n    };\n\n    return () => {\n      socket.emit = originalEmit;\n    };\n  }, [socket]);\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Error Alert */}\n      {error && (\n        <div className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-50 max-w-md w-full mx-4\">\n          <Alert className=\"bg-red-900/90 border-red-500/50 backdrop-blur-sm\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-red-100\">\n              {error}\n            </AlertDescription>\n          </Alert>\n        </div>\n      )}\n\n      {/* Main Content */}\n      {mode === 'landing' && <QuizLanding />}\n      \n      {mode === 'host' && currentRoom && (\n        <QuizHost roomCode={currentRoom} />\n      )}\n      \n      {mode === 'player' && currentRoom && playerName && (\n        <QuizPlayer roomCode={currentRoom} playerName={playerName} />\n      )}\n    </div>\n  );\n}","size_bytes":2591},"client/src/components/quiz/QuizHost.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Crown, \n  Users, \n  Play, \n  Copy,\n  CheckCircle,\n  Clock,\n  Trophy,\n  SkipForward,\n  UserCheck\n} from 'lucide-react';\nimport { useSocket } from '@/lib/stores/useSocket';\n\ninterface Player {\n  id: string;\n  name: string;\n  score: number;\n  connected: boolean;\n  joinedAt: number;\n}\n\ninterface QuizHostProps {\n  roomCode: string;\n}\n\nexport default function QuizHost({ roomCode }: QuizHostProps) {\n  const { socket } = useSocket();\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [gameState, setGameState] = useState<'waiting' | 'active' | 'finished'>('waiting');\n  const [currentQuestion, setCurrentQuestion] = useState<any>(null);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [totalQuestions, setTotalQuestions] = useState(0);\n  const [leaderboard, setLeaderboard] = useState<any[]>([]);\n  const [copied, setCopied] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(0);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('player-joined', (data) => {\n      setPlayers(data.players);\n    });\n\n    socket.on('player-left', (data) => {\n      setPlayers(data.players);\n    });\n\n    socket.on('quiz-started', (data) => {\n      setGameState('active');\n      setCurrentQuestion(data.question);\n      setQuestionNumber(data.questionNumber);\n      setTotalQuestions(data.totalQuestions);\n      setTimeLeft(data.timeLimit);\n    });\n\n    socket.on('next-question', (data) => {\n      setCurrentQuestion(data.question);\n      setQuestionNumber(data.questionNumber);\n      setTimeLeft(data.timeLimit);\n    });\n\n    socket.on('quiz-finished', (data) => {\n      setGameState('finished');\n      setLeaderboard(data.finalLeaderboard);\n    });\n\n    socket.on('leaderboard-update', (data) => {\n      setLeaderboard(data.leaderboard);\n    });\n\n    return () => {\n      socket.off('player-joined');\n      socket.off('player-left');\n      socket.off('quiz-started');\n      socket.off('next-question');\n      socket.off('quiz-finished');\n      socket.off('leaderboard-update');\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (gameState === 'active' && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            // Auto advance to next question when time runs out\n            handleNextQuestion();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [gameState, timeLeft]);\n\n  const copyRoomCode = () => {\n    navigator.clipboard.writeText(roomCode);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const handleStartQuiz = () => {\n    if (socket) {\n      socket.emit('start-quiz', { roomCode });\n    }\n  };\n\n  const handleNextQuestion = () => {\n    if (socket) {\n      socket.emit('next-question', { roomCode });\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Host Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"p-3 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-2xl\">\n              <Crown className=\"h-8 w-8 text-white\" />\n            </div>\n            <h1 className=\"text-4xl font-black text-white\">Quiz Host Panel</h1>\n          </div>\n          \n          {/* Room Code Display */}\n          <Card className=\"max-w-md mx-auto bg-gradient-to-r from-purple-800/50 to-pink-800/50 border-purple-400/30 backdrop-blur-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <Label className=\"text-purple-200 text-sm font-medium\">Room Code</Label>\n                <div className=\"flex items-center justify-center gap-3 mt-2\">\n                  <span className=\"text-4xl font-black text-white font-mono tracking-wider\">\n                    {roomCode}\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    onClick={copyRoomCode}\n                    className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                  >\n                    {copied ? (\n                      <CheckCircle className=\"h-4 w-4\" />\n                    ) : (\n                      <Copy className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                <p className=\"text-purple-300 text-sm mt-2\">\n                  Share this code with players to join\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Left Panel - Players */}\n          <Card className=\"bg-gradient-to-br from-blue-900/80 to-cyan-900/80 border-blue-500/30 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                <Users className=\"h-5 w-5 text-cyan-400\" />\n                Players ({players.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {players.length === 0 ? (\n                <div className=\"text-center py-8 text-blue-300\">\n                  <UserCheck className=\"h-12 w-12 mx-auto mb-3 text-blue-400\" />\n                  <p>Waiting for players to join...</p>\n                </div>\n              ) : (\n                players.map((player, index) => (\n                  <div\n                    key={player.id}\n                    className=\"flex items-center justify-between p-3 bg-blue-800/30 rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center text-white text-sm font-bold\">\n                        {index + 1}\n                      </div>\n                      <span className=\"text-white font-medium\">{player.name}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"secondary\" className=\"bg-blue-700/50 text-blue-200\">\n                        {player.score}\n                      </Badge>\n                      <div className={`w-2 h-2 rounded-full ${\n                        player.connected ? 'bg-green-400' : 'bg-red-400'\n                      }`} />\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Center Panel - Game Control */}\n          <Card className=\"bg-gradient-to-br from-purple-900/80 to-pink-900/80 border-purple-500/30 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                <Play className=\"h-5 w-5 text-purple-400\" />\n                Game Control\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {gameState === 'waiting' && (\n                <div className=\"text-center space-y-4\">\n                  <div className=\"p-6 bg-purple-800/30 rounded-lg\">\n                    <Play className=\"h-12 w-12 text-purple-400 mx-auto mb-3\" />\n                    <p className=\"text-purple-200 mb-4\">Ready to start the quiz?</p>\n                    <Button\n                      onClick={handleStartQuiz}\n                      disabled={players.length === 0}\n                      className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold py-3\"\n                    >\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Start Quiz\n                    </Button>\n                  </div>\n                  {players.length === 0 && (\n                    <p className=\"text-purple-300 text-sm\">\n                      Wait for at least one player to join before starting\n                    </p>\n                  )}\n                </div>\n              )}\n\n              {gameState === 'active' && currentQuestion && (\n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-4 bg-purple-800/30 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge className=\"bg-purple-600 text-white\">\n                        Question {questionNumber}/{totalQuestions}\n                      </Badge>\n                      <div className=\"flex items-center gap-2 text-white\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span className=\"font-mono font-bold\">{formatTime(timeLeft)}</span>\n                      </div>\n                    </div>\n                    \n                    <h3 className=\"text-lg font-semibold text-white mb-2\">\n                      {currentQuestion.type.charAt(0).toUpperCase() + currentQuestion.type.slice(1)} Challenge\n                    </h3>\n                    <p className=\"text-purple-200 text-sm\">\n                      {currentQuestion.description || 'Players are solving this challenge now...'}\n                    </p>\n                  </div>\n\n                  <Button\n                    onClick={handleNextQuestion}\n                    className=\"w-full bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white font-semibold py-3\"\n                  >\n                    <SkipForward className=\"h-4 w-4 mr-2\" />\n                    Next Question\n                  </Button>\n                </div>\n              )}\n\n              {gameState === 'finished' && (\n                <div className=\"text-center space-y-4\">\n                  <div className=\"p-6 bg-yellow-800/30 rounded-lg\">\n                    <Trophy className=\"h-12 w-12 text-yellow-400 mx-auto mb-3\" />\n                    <h3 className=\"text-xl font-bold text-white mb-2\">Quiz Completed!</h3>\n                    <p className=\"text-yellow-200\">\n                      {leaderboard.length > 0 && `🎉 Winner: ${leaderboard[0].name}!`}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Right Panel - Leaderboard */}\n          <Card className=\"bg-gradient-to-br from-green-900/80 to-teal-900/80 border-green-500/30 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                <Trophy className=\"h-5 w-5 text-yellow-400\" />\n                Live Leaderboard\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {leaderboard.length === 0 ? (\n                <div className=\"text-center py-8 text-green-300\">\n                  <Trophy className=\"h-12 w-12 mx-auto mb-3 text-green-400\" />\n                  <p>Leaderboard will appear during the quiz</p>\n                </div>\n              ) : (\n                leaderboard.map((player, index) => (\n                  <div\n                    key={index}\n                    className={`flex items-center justify-between p-3 rounded-lg ${\n                      index === 0 \n                        ? 'bg-gradient-to-r from-yellow-600/30 to-orange-600/30 border border-yellow-400/30' \n                        : 'bg-green-800/30'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${\n                        index === 0 ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :\n                        index === 1 ? 'bg-gradient-to-r from-gray-400 to-gray-500' :\n                        index === 2 ? 'bg-gradient-to-r from-amber-600 to-amber-700' :\n                        'bg-gradient-to-r from-green-500 to-teal-500'\n                      }`}>\n                        {index === 0 ? '👑' : index + 1}\n                      </div>\n                      <span className=\"text-white font-medium\">{player.name}</span>\n                    </div>\n                    <div className=\"text-white font-bold text-lg\">\n                      {player.score}\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Label = ({ children, className }: { children: React.ReactNode, className?: string }) => (\n  <label className={className}>{children}</label>\n);","size_bytes":13128},"client/src/components/quiz/QuizLanding.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Crown, \n  Users, \n  Play, \n  Sparkles, \n  Trophy, \n  Clock, \n  Target,\n  Zap,\n  Star,\n  ChevronRight\n} from 'lucide-react';\nimport { useSocket } from '@/lib/stores/useSocket';\n\nexport default function QuizLanding() {\n  const { socket, connect, isConnected } = useSocket();\n  const [mode, setMode] = useState<'choose' | 'host' | 'join'>('choose');\n  const [hostName, setHostName] = useState('');\n  const [playerName, setPlayerName] = useState('');\n  const [roomCode, setRoomCode] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [useCustomCode, setUseCustomCode] = useState(false);\n  const [customRoomCode, setCustomRoomCode] = useState('');\n  const [questions, setQuestions] = useState<Array<{\n    id: number;\n    question: string;\n    options: string[];\n    correctAnswer: number;\n  }>>([{ id: 1, question: '', options: ['', '', '', ''], correctAnswer: 0 }]);\n\n  useEffect(() => {\n    connect();\n  }, [connect]);\n\n  const handleCreateRoom = () => {\n    if (!hostName.trim() || !socket) return;\n    if (useCustomCode && !customRoomCode.trim()) return;\n    \n    // Validate questions\n    const validQuestions = questions.filter(q => \n      q.question.trim() && \n      q.options.every(opt => opt.trim()) &&\n      q.correctAnswer >= 0 && q.correctAnswer < 4\n    );\n    \n    if (validQuestions.length === 0) {\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    socket.emit('create-room', {\n      hostName: hostName.trim(),\n      questions: validQuestions,\n      customRoomCode: useCustomCode ? customRoomCode.trim().toUpperCase() : undefined\n    });\n  };\n\n  const handleJoinRoom = () => {\n    if (!playerName.trim() || !roomCode.trim() || !socket) return;\n    setIsLoading(true);\n    \n    socket.emit('join-room', {\n      roomCode: roomCode.trim().toUpperCase(),\n      playerName: playerName.trim()\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 relative overflow-hidden\">\n      {/* Animated background elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-yellow-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000\"></div>\n        <div className=\"absolute top-40 left-40 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000\"></div>\n      </div>\n\n      {/* Floating particles */}\n      <div className=\"absolute inset-0\">\n        {Array.from({ length: 20 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-2 h-2 bg-white rounded-full opacity-20 animate-float\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${Math.random() * 3}s`,\n              animationDuration: `${3 + Math.random() * 4}s`\n            }}\n          />\n        ))}\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center gap-3 mb-6\">\n            <div className=\"p-3 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-2xl shadow-lg\">\n              <Sparkles className=\"h-8 w-8 text-white\" />\n            </div>\n            <h1 className=\"text-5xl md:text-6xl font-black bg-gradient-to-r from-yellow-400 via-pink-400 to-purple-400 bg-clip-text text-transparent\">\n              QuizMaster Live\n            </h1>\n          </div>\n          <p className=\"text-xl text-purple-100 font-light max-w-2xl mx-auto leading-relaxed\">\n            Host live quiz competitions where anyone can join and compete in real-time! \n            Experience the thrill of competitive puzzles and brain teasers.\n          </p>\n          <div className=\"flex items-center justify-center gap-6 mt-8\">\n            <Badge variant=\"secondary\" className=\"bg-purple-800/50 text-purple-100 px-4 py-2 text-sm\">\n              <Users className=\"h-4 w-4 mr-2\" />\n              Multiplayer\n            </Badge>\n            <Badge variant=\"secondary\" className=\"bg-blue-800/50 text-blue-100 px-4 py-2 text-sm\">\n              <Clock className=\"h-4 w-4 mr-2\" />\n              Real-time\n            </Badge>\n            <Badge variant=\"secondary\" className=\"bg-pink-800/50 text-pink-100 px-4 py-2 text-sm\">\n              <Target className=\"h-4 w-4 mr-2\" />\n              Adaptive\n            </Badge>\n          </div>\n        </div>\n\n        {/* Connection status */}\n        <div className=\"text-center mb-8\">\n          <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium ${\n            isConnected \n              ? 'bg-green-900/30 text-green-300 border border-green-500/30' \n              : 'bg-yellow-900/30 text-yellow-300 border border-yellow-500/30'\n          }`}>\n            <div className={`w-2 h-2 rounded-full ${\n              isConnected ? 'bg-green-400 animate-pulse' : 'bg-yellow-400'\n            }`} />\n            {isConnected ? 'Connected to Quiz Server' : 'Connecting to Server...'}\n          </div>\n        </div>\n\n        {mode === 'choose' && (\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {/* Host a Quiz */}\n              <Card className=\"group relative overflow-hidden bg-gradient-to-br from-purple-900/80 to-pink-900/80 border-purple-500/30 backdrop-blur-sm hover:shadow-2xl hover:shadow-purple-500/20 transition-all duration-300 hover:scale-105\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-purple-600/20 to-pink-600/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                <CardHeader className=\"relative pb-4\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <div className=\"p-3 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl\">\n                      <Crown className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-2xl font-bold text-white\">Host a Quiz</CardTitle>\n                      <p className=\"text-purple-200 text-sm\">Control the game, manage players</p>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"relative space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                    <div className=\"text-center p-3 bg-purple-800/30 rounded-lg\">\n                      <Zap className=\"h-5 w-5 text-yellow-400 mx-auto mb-1\" />\n                      <p className=\"text-xs text-purple-200\">Real-time Control</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-purple-800/30 rounded-lg\">\n                      <Trophy className=\"h-5 w-5 text-yellow-400 mx-auto mb-1\" />\n                      <p className=\"text-xs text-purple-200\">Live Leaderboard</p>\n                    </div>\n                  </div>\n                  <Button \n                    onClick={() => setMode('host')}\n                    disabled={!isConnected}\n                    className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold py-3 rounded-xl group-hover:shadow-lg transition-all duration-300\"\n                  >\n                    <Crown className=\"h-4 w-4 mr-2\" />\n                    Host Quiz\n                    <ChevronRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform duration-300\" />\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Join a Quiz */}\n              <Card className=\"group relative overflow-hidden bg-gradient-to-br from-blue-900/80 to-cyan-900/80 border-blue-500/30 backdrop-blur-sm hover:shadow-2xl hover:shadow-blue-500/20 transition-all duration-300 hover:scale-105\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600/20 to-cyan-600/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                <CardHeader className=\"relative pb-4\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <div className=\"p-3 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl\">\n                      <Play className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-2xl font-bold text-white\">Join a Quiz</CardTitle>\n                      <p className=\"text-blue-200 text-sm\">Enter a room code and compete</p>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"relative space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                    <div className=\"text-center p-3 bg-blue-800/30 rounded-lg\">\n                      <Star className=\"h-5 w-5 text-yellow-400 mx-auto mb-1\" />\n                      <p className=\"text-xs text-blue-200\">Compete Live</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-blue-800/30 rounded-lg\">\n                      <Users className=\"h-5 w-5 text-yellow-400 mx-auto mb-1\" />\n                      <p className=\"text-xs text-blue-200\">Join Others</p>\n                    </div>\n                  </div>\n                  <Button \n                    onClick={() => setMode('join')}\n                    disabled={!isConnected}\n                    className=\"w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white font-semibold py-3 rounded-xl group-hover:shadow-lg transition-all duration-300\"\n                  >\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Join Quiz\n                    <ChevronRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform duration-300\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {mode === 'host' && (\n          <div className=\"max-w-md mx-auto\">\n            <Card className=\"bg-gradient-to-br from-purple-900/90 to-pink-900/90 border-purple-500/30 backdrop-blur-sm shadow-2xl\">\n              <CardHeader className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-2 mb-4\">\n                  <Crown className=\"h-6 w-6 text-yellow-400\" />\n                  <CardTitle className=\"text-2xl font-bold text-white\">Host Quiz Setup</CardTitle>\n                </div>\n                <p className=\"text-purple-200\">Configure your live quiz session</p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label className=\"text-purple-200 font-medium\">Host Name</Label>\n                  <Input\n                    placeholder=\"Enter your name as host\"\n                    value={hostName}\n                    onChange={(e) => setHostName(e.target.value)}\n                    className=\"mt-2 bg-purple-800/30 border-purple-500/50 text-white placeholder-purple-300 focus:border-purple-400\"\n                  />\n                </div>\n                \n                <div>\n                  <Label className=\"text-purple-200 font-medium\">Create Your Questions</Label>\n                  <div className=\"space-y-4 mt-2\">\n                    {questions.map((q, qIndex) => (\n                      <Card key={q.id} className=\"bg-purple-800/20 border-purple-500/30\">\n                        <CardContent className=\"p-4 space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <Label className=\"text-purple-200 text-sm\">Question {qIndex + 1}</Label>\n                            {questions.length > 1 && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => setQuestions(questions.filter(quest => quest.id !== q.id))}\n                                className=\"h-6 w-6 p-0 border-red-500/50 text-red-300 hover:bg-red-800/50\"\n                              >\n                                ×\n                              </Button>\n                            )}\n                          </div>\n                          \n                          <Input\n                            placeholder=\"Enter your question...\"\n                            value={q.question}\n                            onChange={(e) => {\n                              const newQuestions = [...questions];\n                              newQuestions[qIndex].question = e.target.value;\n                              setQuestions(newQuestions);\n                            }}\n                            className=\"bg-purple-800/30 border-purple-500/50 text-white placeholder-purple-300 focus:border-purple-400\"\n                          />\n                          \n                          <div className=\"space-y-2\">\n                            <Label className=\"text-purple-200 text-sm\">Answer Options</Label>\n                            {q.options.map((option, optIndex) => (\n                              <div key={optIndex} className=\"flex items-center gap-2\">\n                                <button\n                                  type=\"button\"\n                                  onClick={() => {\n                                    const newQuestions = [...questions];\n                                    newQuestions[qIndex].correctAnswer = optIndex;\n                                    setQuestions(newQuestions);\n                                  }}\n                                  className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\n                                    q.correctAnswer === optIndex\n                                      ? 'border-green-400 bg-green-500'\n                                      : 'border-purple-500/50 hover:border-purple-400'\n                                  }`}\n                                >\n                                  {q.correctAnswer === optIndex && <div className=\"w-3 h-3 bg-white rounded-full\" />}\n                                </button>\n                                <Input\n                                  placeholder={`Option ${optIndex + 1}...`}\n                                  value={option}\n                                  onChange={(e) => {\n                                    const newQuestions = [...questions];\n                                    newQuestions[qIndex].options[optIndex] = e.target.value;\n                                    setQuestions(newQuestions);\n                                  }}\n                                  className=\"flex-1 bg-purple-800/30 border-purple-500/50 text-white placeholder-purple-300 focus:border-purple-400\"\n                                />\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                    \n                    <Button\n                      onClick={() => {\n                        const newId = Math.max(...questions.map(q => q.id)) + 1;\n                        setQuestions([...questions, { \n                          id: newId, \n                          question: '', \n                          options: ['', '', '', ''], \n                          correctAnswer: 0 \n                        }]);\n                      }}\n                      variant=\"outline\"\n                      className=\"w-full border-purple-500/50 text-purple-200 hover:bg-purple-800/50\"\n                    >\n                      + Add Question\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Label className=\"text-purple-200 font-medium\">Room Code</Label>\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                        setUseCustomCode(!useCustomCode);\n                        if (useCustomCode) setCustomRoomCode('');\n                      }}\n                      className=\"text-xs text-purple-300 hover:text-purple-100 underline\"\n                    >\n                      {useCustomCode ? 'Use auto-generated' : 'Create custom code'}\n                    </button>\n                  </div>\n                  \n                  {useCustomCode ? (\n                    <div>\n                      <Input\n                        placeholder=\"Enter 4-6 character code\"\n                        value={customRoomCode}\n                        onChange={(e) => setCustomRoomCode(e.target.value.toUpperCase().slice(0, 6))}\n                        maxLength={6}\n                        className=\"bg-purple-800/30 border-purple-500/50 text-white placeholder-purple-300 focus:border-purple-400 text-center font-mono tracking-widest\"\n                      />\n                      <p className=\"text-xs text-purple-300 mt-1 text-center\">\n                        Custom codes must be 4-6 characters (letters/numbers)\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"text-center p-3 bg-purple-800/30 rounded-lg border border-purple-500/50\">\n                      <p className=\"text-purple-200 text-sm\">\n                        A 6-digit code will be generated automatically\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex space-x-3 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setMode('choose')}\n                    className=\"flex-1 border-purple-500/50 text-purple-200 hover:bg-purple-800/50\"\n                  >\n                    Back\n                  </Button>\n                  <Button\n                    onClick={handleCreateRoom}\n                    disabled={\n                      !hostName.trim() || \n                      !isConnected || \n                      isLoading || \n                      (useCustomCode && customRoomCode.trim().length < 4) ||\n                      !questions.some(q => q.question.trim() && q.options.every(opt => opt.trim()))\n                    }\n                    className=\"flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white\"\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                        Creating...\n                      </div>\n                    ) : (\n                      <>\n                        <Crown className=\"h-4 w-4 mr-2\" />\n                        Create Room\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {mode === 'join' && (\n          <div className=\"max-w-md mx-auto\">\n            <Card className=\"bg-gradient-to-br from-blue-900/90 to-cyan-900/90 border-blue-500/30 backdrop-blur-sm shadow-2xl\">\n              <CardHeader className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-2 mb-4\">\n                  <Play className=\"h-6 w-6 text-cyan-400\" />\n                  <CardTitle className=\"text-2xl font-bold text-white\">Join Quiz</CardTitle>\n                </div>\n                <p className=\"text-blue-200\">Enter the room code to participate</p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label className=\"text-blue-200 font-medium\">Your Name</Label>\n                  <Input\n                    placeholder=\"Enter your player name\"\n                    value={playerName}\n                    onChange={(e) => setPlayerName(e.target.value)}\n                    className=\"mt-2 bg-blue-800/30 border-blue-500/50 text-white placeholder-blue-300 focus:border-blue-400\"\n                  />\n                </div>\n                \n                <div>\n                  <Label className=\"text-blue-200 font-medium\">Room Code</Label>\n                  <Input\n                    placeholder=\"Enter 6-digit room code\"\n                    value={roomCode}\n                    onChange={(e) => setRoomCode(e.target.value.toUpperCase())}\n                    maxLength={6}\n                    className=\"mt-2 bg-blue-800/30 border-blue-500/50 text-white placeholder-blue-300 focus:border-blue-400 text-center text-xl font-mono tracking-widest\"\n                  />\n                </div>\n\n                <div className=\"flex space-x-3 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setMode('choose')}\n                    className=\"flex-1 border-blue-500/50 text-blue-200 hover:bg-blue-800/50\"\n                  >\n                    Back\n                  </Button>\n                  <Button\n                    onClick={handleJoinRoom}\n                    disabled={!playerName.trim() || !roomCode.trim() || !isConnected || isLoading}\n                    className=\"flex-1 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white\"\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                        Joining...\n                      </div>\n                    ) : (\n                      <>\n                        <Play className=\"h-4 w-4 mr-2\" />\n                        Join Room\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":22741},"client/src/components/quiz/QuizPlayer.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { \n  Play, \n  Clock,\n  Trophy,\n  Users,\n  Star,\n  CheckCircle,\n  XCircle,\n  Timer,\n  Crown\n} from 'lucide-react';\nimport { useSocket } from '@/lib/stores/useSocket';\n\ninterface QuizPlayerProps {\n  roomCode: string;\n  playerName: string;\n}\n\nexport default function QuizPlayer({ roomCode, playerName }: QuizPlayerProps) {\n  const { socket } = useSocket();\n  const [gameState, setGameState] = useState<'waiting' | 'active' | 'finished'>('waiting');\n  const [currentQuestion, setCurrentQuestion] = useState<string>('');\n  const [questionOptions, setQuestionOptions] = useState<string[]>([]);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [totalQuestions, setTotalQuestions] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState<number>(-1);\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  const [lastResult, setLastResult] = useState<any>(null);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [leaderboard, setLeaderboard] = useState<any[]>([]);\n  const [players, setPlayers] = useState<any[]>([]);\n  const [hostName, setHostName] = useState('');\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('room-joined', (data) => {\n      setPlayers(data.players);\n      setHostName(data.hostName);\n    });\n\n    socket.on('player-joined', (data) => {\n      setPlayers(data.players);\n    });\n\n    socket.on('player-left', (data) => {\n      setPlayers(data.players);\n    });\n\n    socket.on('quiz-started', (data) => {\n      setGameState('active');\n      setCurrentQuestion(data.question);\n      setQuestionOptions(data.options);\n      setQuestionNumber(data.questionNumber);\n      setTotalQuestions(data.totalQuestions);\n      setTimeLeft(data.timeLimit);\n      setHasSubmitted(false);\n      setSelectedAnswer(-1);\n      setLastResult(null);\n    });\n\n    socket.on('next-question', (data) => {\n      setCurrentQuestion(data.question);\n      setQuestionOptions(data.options);\n      setQuestionNumber(data.questionNumber);\n      setTimeLeft(data.timeLimit);\n      setHasSubmitted(false);\n      setSelectedAnswer(-1);\n      setLastResult(null);\n    });\n\n    socket.on('quiz-finished', (data) => {\n      setGameState('finished');\n      setLeaderboard(data.finalLeaderboard);\n    });\n\n    socket.on('answer-result', (data) => {\n      setLastResult(data);\n      setCurrentScore(data.currentScore);\n    });\n\n    socket.on('leaderboard-update', (data) => {\n      setLeaderboard(data.leaderboard);\n    });\n\n    return () => {\n      socket.off('room-joined');\n      socket.off('player-joined');\n      socket.off('player-left');\n      socket.off('quiz-started');\n      socket.off('next-question');\n      socket.off('quiz-finished');\n      socket.off('answer-result');\n      socket.off('leaderboard-update');\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (gameState === 'active' && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 1));\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [gameState, timeLeft]);\n\n  const handleSubmitAnswer = () => {\n    if (!socket || hasSubmitted || selectedAnswer === -1) return;\n\n    const timeSpent = 30 - timeLeft;\n    socket.emit('submit-answer', {\n      roomCode,\n      answer: selectedAnswer,\n      timeSpent\n    });\n\n    setHasSubmitted(true);\n  };\n\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getPlayerRank = () => {\n    const playerRank = leaderboard.findIndex(p => p.name === playerName) + 1;\n    return playerRank > 0 ? playerRank : null;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Player Header */}\n        <div className=\"text-center mb-6\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"p-3 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-2xl\">\n              <Play className=\"h-6 w-6 text-white\" />\n            </div>\n            <h1 className=\"text-3xl font-black text-white\">{playerName}</h1>\n          </div>\n          \n          <div className=\"flex items-center justify-center gap-4 text-blue-200\">\n            <span>Room: <span className=\"font-mono font-bold text-white\">{roomCode}</span></span>\n            <span>Host: <span className=\"text-white\">{hostName}</span></span>\n            {currentScore > 0 && (\n              <Badge className=\"bg-yellow-600 text-white\">\n                <Star className=\"h-3 w-3 mr-1\" />\n                {currentScore} points\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        {gameState === 'waiting' && (\n          <div className=\"max-w-2xl mx-auto\">\n            <Card className=\"bg-gradient-to-br from-blue-900/80 to-purple-900/80 border-blue-500/30 backdrop-blur-sm\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl font-bold text-white\">Waiting for Quiz to Start</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"text-center p-6 bg-blue-800/30 rounded-lg\">\n                  <Users className=\"h-12 w-12 text-blue-400 mx-auto mb-4\" />\n                  <p className=\"text-blue-200 mb-4\">\n                    Players in room: <span className=\"font-bold text-white\">{players.length}</span>\n                  </p>\n                  \n                  <div className=\"space-y-2\">\n                    {players.map((player, index) => (\n                      <div key={player.id} className=\"flex items-center justify-center gap-2 text-blue-200\">\n                        <div className=\"w-2 h-2 bg-blue-400 rounded-full\" />\n                        <span className={player.name === playerName ? 'text-white font-bold' : ''}>\n                          {player.name}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-purple-800/30 rounded-full text-purple-200\">\n                    <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-pulse\" />\n                    Waiting for host to start the quiz...\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {gameState === 'active' && currentQuestion && (\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {/* Question Panel */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"bg-gradient-to-br from-purple-900/80 to-pink-900/80 border-purple-500/30 backdrop-blur-sm\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-white\">\n                      Question {questionNumber}/{totalQuestions}\n                    </CardTitle>\n                    <div className={`flex items-center gap-2 px-3 py-1 rounded-full ${\n                      timeLeft <= 10 ? 'bg-red-800/50 text-red-200' : 'bg-blue-800/50 text-blue-200'\n                    }`}>\n                      <Clock className=\"h-4 w-4\" />\n                      <span className=\"font-mono font-bold\">{formatTime(timeLeft)}</span>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-xl font-semibold text-white mb-6\">\n                      {currentQuestion}\n                    </h3>\n                  </div>\n\n                  {/* Multiple Choice Options */}\n                  <div className=\"space-y-3\">\n                    {questionOptions.map((option, index) => (\n                      <button\n                        key={index}\n                        onClick={() => setSelectedAnswer(index)}\n                        disabled={hasSubmitted}\n                        className={`w-full p-4 rounded-lg border-2 text-left transition-all duration-200 ${\n                          selectedAnswer === index\n                            ? 'bg-purple-600 border-purple-400 text-white'\n                            : 'bg-purple-800/30 border-purple-500/50 text-purple-100 hover:bg-purple-700/50 hover:border-purple-400'\n                        } ${hasSubmitted ? 'cursor-not-allowed opacity-50' : 'cursor-pointer'}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\n                            selectedAnswer === index\n                              ? 'border-white bg-white'\n                              : 'border-purple-400'\n                          }`}>\n                            {selectedAnswer === index && (\n                              <div className=\"w-3 h-3 bg-purple-600 rounded-full\" />\n                            )}\n                          </div>\n                          <span className=\"flex-1 font-medium\">\n                            <span className=\"text-purple-300 font-bold mr-2\">\n                              {String.fromCharCode(65 + index)}.\n                            </span>\n                            {option}\n                          </span>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n\n                  {/* Submit Button */}\n                  {!hasSubmitted && timeLeft > 0 && (\n                    <div className=\"text-center pt-4\">\n                      <Button\n                        onClick={handleSubmitAnswer}\n                        disabled={\n                          (currentQuestion.type === 'pattern' && selectedAnswers.length === 0) ||\n                          (currentQuestion.type === 'logic' && !playerAnswer.trim()) ||\n                          (currentQuestion.type === 'spatial' && selectedAnswers.length === 0)\n                        }\n                        className=\"bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700 text-white font-semibold px-8 py-3\"\n                      >\n                        Submit Answer\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* Answer Result */}\n                  {lastResult && (\n                    <div className={`text-center p-4 rounded-lg ${\n                      lastResult.isCorrect \n                        ? 'bg-green-900/50 border border-green-500/30' \n                        : 'bg-red-900/50 border border-red-500/30'\n                    }`}>\n                      <div className=\"flex items-center justify-center gap-2 mb-2\">\n                        {lastResult.isCorrect ? (\n                          <CheckCircle className=\"h-6 w-6 text-green-400\" />\n                        ) : (\n                          <XCircle className=\"h-6 w-6 text-red-400\" />\n                        )}\n                        <span className={`font-bold text-lg ${\n                          lastResult.isCorrect ? 'text-green-300' : 'text-red-300'\n                        }`}>\n                          {lastResult.isCorrect ? 'Correct!' : 'Incorrect'}\n                        </span>\n                      </div>\n                      <p className={`text-sm ${\n                        lastResult.isCorrect ? 'text-green-200' : 'text-red-200'\n                      }`}>\n                        {lastResult.feedback}\n                      </p>\n                      {lastResult.score > 0 && (\n                        <Badge className=\"bg-yellow-600 text-white mt-2\">\n                          +{lastResult.score} points\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Leaderboard Panel */}\n            <Card className=\"bg-gradient-to-br from-green-900/80 to-teal-900/80 border-green-500/30 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <Trophy className=\"h-5 w-5 text-yellow-400\" />\n                  Live Leaderboard\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {leaderboard.length === 0 ? (\n                  <div className=\"text-center py-8 text-green-300\">\n                    <Trophy className=\"h-8 w-8 mx-auto mb-3 text-green-400\" />\n                    <p className=\"text-sm\">Scores will appear here</p>\n                  </div>\n                ) : (\n                  leaderboard.map((player, index) => (\n                    <div\n                      key={index}\n                      className={`flex items-center justify-between p-3 rounded-lg ${\n                        player.name === playerName\n                          ? 'bg-blue-700/50 border border-blue-400/50'\n                          : index === 0 \n                          ? 'bg-gradient-to-r from-yellow-600/30 to-orange-600/30 border border-yellow-400/30' \n                          : 'bg-green-800/30'\n                      }`}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-bold ${\n                          index === 0 ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :\n                          index === 1 ? 'bg-gradient-to-r from-gray-400 to-gray-500' :\n                          index === 2 ? 'bg-gradient-to-r from-amber-600 to-amber-700' :\n                          'bg-gradient-to-r from-green-500 to-teal-500'\n                        }`}>\n                          {index === 0 ? <Crown className=\"h-3 w-3\" /> : index + 1}\n                        </div>\n                        <span className={`text-sm font-medium ${\n                          player.name === playerName ? 'text-blue-200 font-bold' : 'text-white'\n                        }`}>\n                          {player.name}\n                        </span>\n                      </div>\n                      <div className=\"text-white font-bold\">\n                        {player.score}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {gameState === 'finished' && (\n          <div className=\"max-w-2xl mx-auto\">\n            <Card className=\"bg-gradient-to-br from-yellow-900/80 to-orange-900/80 border-yellow-500/30 backdrop-blur-sm\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-3xl font-bold text-white\">Quiz Finished!</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"text-center\">\n                  <Trophy className=\"h-16 w-16 text-yellow-400 mx-auto mb-4\" />\n                  \n                  {leaderboard.length > 0 && (\n                    <div>\n                      <h3 className=\"text-xl font-bold text-white mb-4\">\n                        🎉 Winner: {leaderboard[0].name}!\n                      </h3>\n                      \n                      <div className=\"space-y-2\">\n                        {leaderboard.slice(0, 5).map((player, index) => (\n                          <div\n                            key={index}\n                            className={`flex items-center justify-between p-3 rounded-lg ${\n                              player.name === playerName\n                                ? 'bg-blue-700/50 border border-blue-400/50'\n                                : index === 0\n                                ? 'bg-gradient-to-r from-yellow-600/30 to-orange-600/30'\n                                : 'bg-yellow-800/30'\n                            }`}\n                          >\n                            <div className=\"flex items-center gap-3\">\n                              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${\n                                index === 0 ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :\n                                index === 1 ? 'bg-gradient-to-r from-gray-400 to-gray-500' :\n                                index === 2 ? 'bg-gradient-to-r from-amber-600 to-amber-700' :\n                                'bg-gradient-to-r from-yellow-600 to-orange-600'\n                              }`}>\n                                {index === 0 ? '👑' : index + 1}\n                              </div>\n                              <span className={`font-medium ${\n                                player.name === playerName ? 'text-blue-200 font-bold' : 'text-white'\n                              }`}>\n                                {player.name}\n                              </span>\n                            </div>\n                            <div className=\"text-white font-bold text-lg\">\n                              {player.score}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"text-center\">\n                  <p className=\"text-yellow-200\">\n                    Your final rank: <span className=\"font-bold text-white\">#{getPlayerRank()}</span>\n                  </p>\n                  <p className=\"text-yellow-200\">\n                    Your final score: <span className=\"font-bold text-white\">{currentScore} points</span>\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":18439},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/usePuzzleGame.tsx":{"content":"import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { generatePuzzle } from '@/lib/puzzleGenerator';\nimport { SkillTracker } from '@/lib/skillTracker';\n\nexport interface Player {\n  name: string;\n  score: number;\n  puzzlesSolved: number;\n  averageTime: number;\n  difficulty: number;\n}\n\nexport interface Puzzle {\n  type: 'pattern' | 'logic' | 'spatial';\n  difficulty: number;\n  solution: any;\n  timeLimit: number;\n  [key: string]: any;\n}\n\ninterface PuzzleGameState {\n  gamePhase: 'setup' | 'playing' | 'gameOver';\n  players: Player[];\n  currentPlayer: number;\n  currentPuzzle: Puzzle | null;\n  timeLeft: number;\n  puzzlesCompleted: number;\n  totalPuzzles: number;\n  skillTracker: SkillTracker;\n  \n  // Actions\n  initializeGame: () => void;\n  startGame: (playerNames: string[]) => void;\n  nextPuzzle: () => void;\n  submitAnswer: (answer: any, isCorrect: boolean) => void;\n  nextTurn: () => void;\n  restartGame: () => void;\n  goToSetup: () => void;\n}\n\nexport const usePuzzleGame = create<PuzzleGameState>()(\n  subscribeWithSelector((set, get) => ({\n    gamePhase: 'setup',\n    players: [],\n    currentPlayer: 0,\n    currentPuzzle: null,\n    timeLeft: 120, // 2 minutes per session\n    puzzlesCompleted: 0,\n    totalPuzzles: 10,\n    skillTracker: new SkillTracker(),\n\n    initializeGame: () => {\n      const skillTracker = new SkillTracker();\n      set({ skillTracker });\n    },\n\n    startGame: (playerNames: string[]) => {\n      const { skillTracker } = get();\n      const players = playerNames.map(name => ({\n        name,\n        score: 0,\n        puzzlesSolved: 0,\n        averageTime: 0,\n        difficulty: skillTracker.getPlayerDifficulty(name)\n      }));\n\n      set({\n        gamePhase: 'playing',\n        players,\n        currentPlayer: 0,\n        puzzlesCompleted: 0,\n        timeLeft: 120\n      });\n\n      get().nextPuzzle();\n      \n      // Start countdown timer\n      const timer = setInterval(() => {\n        const state = get();\n        if (state.timeLeft <= 1) {\n          clearInterval(timer);\n          set({ gamePhase: 'gameOver' });\n        } else {\n          set({ timeLeft: state.timeLeft - 1 });\n        }\n      }, 1000);\n    },\n\n    nextPuzzle: () => {\n      const { players, currentPlayer, skillTracker } = get();\n      const player = players[currentPlayer];\n      \n      const puzzle = generatePuzzle(\n        ['pattern', 'logic', 'spatial'][Math.floor(Math.random() * 3)] as any,\n        player.difficulty\n      );\n\n      set({ currentPuzzle: puzzle });\n    },\n\n    submitAnswer: (answer: any, isCorrect: boolean) => {\n      const { \n        players, \n        currentPlayer, \n        currentPuzzle, \n        puzzlesCompleted, \n        totalPuzzles,\n        skillTracker \n      } = get();\n      \n      if (!currentPuzzle) return;\n\n      const player = players[currentPlayer];\n      const timeSpent = currentPuzzle.timeLimit - 10; // Simplified time calculation\n      \n      // Update skill tracking\n      skillTracker.recordAttempt(player.name, {\n        puzzleType: currentPuzzle.type,\n        difficulty: currentPuzzle.difficulty,\n        isCorrect,\n        timeSpent,\n        answer,\n        timestamp: Date.now()\n      });\n\n      // Update player stats\n      const updatedPlayers = [...players];\n      if (isCorrect) {\n        updatedPlayers[currentPlayer].score += currentPuzzle.difficulty * 10;\n        updatedPlayers[currentPlayer].puzzlesSolved += 1;\n      }\n      \n      // Update difficulty for next puzzle\n      updatedPlayers[currentPlayer].difficulty = skillTracker.getPlayerDifficulty(player.name);\n\n      const newPuzzlesCompleted = puzzlesCompleted + 1;\n      \n      set({ \n        players: updatedPlayers,\n        puzzlesCompleted: newPuzzlesCompleted\n      });\n\n      if (newPuzzlesCompleted >= totalPuzzles) {\n        set({ gamePhase: 'gameOver' });\n      } else {\n        setTimeout(() => {\n          get().nextTurn();\n        }, 1500);\n      }\n    },\n\n    nextTurn: () => {\n      const { players, currentPlayer } = get();\n      const nextPlayerIndex = (currentPlayer + 1) % players.length;\n      \n      set({ currentPlayer: nextPlayerIndex });\n      get().nextPuzzle();\n    },\n\n    restartGame: () => {\n      const { players } = get();\n      const playerNames = players.map(p => p.name);\n      get().startGame(playerNames);\n    },\n\n    goToSetup: () => {\n      set({\n        gamePhase: 'setup',\n        players: [],\n        currentPlayer: 0,\n        currentPuzzle: null,\n        puzzlesCompleted: 0,\n        timeLeft: 120\n      });\n    }\n  }))\n);\n","size_bytes":4538},"client/src/lib/stores/useSocket.tsx":{"content":"import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { io, Socket } from 'socket.io-client';\n\ninterface SocketState {\n  socket: Socket | null;\n  isConnected: boolean;\n  currentRoom: string | null;\n  isHost: boolean;\n  error: string | null;\n  \n  // Actions\n  connect: () => void;\n  disconnect: () => void;\n  setRoom: (roomCode: string, isHost: boolean) => void;\n  clearError: () => void;\n}\n\nexport const useSocket = create<SocketState>()(\n  subscribeWithSelector((set, get) => ({\n    socket: null,\n    isConnected: false,\n    currentRoom: null,\n    isHost: false,\n    error: null,\n\n    connect: () => {\n      const { socket } = get();\n      \n      if (socket && socket.connected) {\n        return;\n      }\n\n      console.log('Connecting to quiz server...');\n      const newSocket = io(window.location.origin, {\n        transports: ['websocket', 'polling']\n      });\n\n      newSocket.on('connect', () => {\n        console.log('Connected to quiz server');\n        set({ isConnected: true, error: null });\n      });\n\n      newSocket.on('disconnect', () => {\n        console.log('Disconnected from quiz server');\n        set({ isConnected: false, currentRoom: null, isHost: false });\n      });\n\n      newSocket.on('connect_error', (error) => {\n        console.error('Connection error:', error);\n        set({ \n          isConnected: false, \n          error: 'Failed to connect to quiz server' \n        });\n      });\n\n      // Quiz room events\n      newSocket.on('room-created', (data) => {\n        console.log('Room created:', data);\n        set({ \n          currentRoom: data.roomCode, \n          isHost: true, \n          error: null \n        });\n      });\n\n      newSocket.on('room-joined', (data) => {\n        console.log('Room joined:', data);\n        set({ \n          currentRoom: data.roomCode, \n          isHost: false, \n          error: null \n        });\n      });\n\n      newSocket.on('join-error', (data) => {\n        console.error('Join error:', data);\n        set({ error: data.message });\n      });\n\n      newSocket.on('player-joined', (data) => {\n        console.log('Player joined:', data);\n      });\n\n      newSocket.on('player-left', (data) => {\n        console.log('Player left:', data);\n      });\n\n      newSocket.on('quiz-started', (data) => {\n        console.log('Quiz started:', data);\n      });\n\n      newSocket.on('next-question', (data) => {\n        console.log('Next question:', data);\n      });\n\n      newSocket.on('quiz-finished', (data) => {\n        console.log('Quiz finished:', data);\n      });\n\n      newSocket.on('answer-result', (data) => {\n        console.log('Answer result:', data);\n      });\n\n      newSocket.on('leaderboard-update', (data) => {\n        console.log('Leaderboard update:', data);\n      });\n\n      set({ socket: newSocket });\n    },\n\n    disconnect: () => {\n      const { socket } = get();\n      if (socket) {\n        socket.disconnect();\n        set({ \n          socket: null, \n          isConnected: false, \n          currentRoom: null,\n          isHost: false,\n          error: null \n        });\n      }\n    },\n\n    setRoom: (roomCode, isHost) => {\n      set({ currentRoom: roomCode, isHost });\n    },\n\n    clearError: () => {\n      set({ error: null });\n    }\n  }))\n);","size_bytes":3267}},"version":1}